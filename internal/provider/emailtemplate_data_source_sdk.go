// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/epilot-dev/terraform-provider-epilot-emailtemplate/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
	"time"
)

func (r *EmailTemplateDataSourceModel) RefreshFromSharedEmailTemplateEntity(resp *shared.EmailTemplateEntity) {
	r.Attachments = nil
	for _, attachmentsItem := range resp.Attachments {
		var attachments1 types.String
		attachments1Result, _ := json.Marshal(attachmentsItem)
		attachments1 = types.StringValue(string(attachments1Result))
		r.Attachments = append(r.Attachments, attachments1)
	}
	r.Bcc = nil
	for _, bccItem := range resp.Bcc {
		var bcc1 types.String
		bcc1Result, _ := json.Marshal(bccItem)
		bcc1 = types.StringValue(string(bcc1Result))
		r.Bcc = append(r.Bcc, bcc1)
	}
	r.Body = types.StringPointerValue(resp.Body)
	if resp.BrandID != nil {
		r.BrandID = types.NumberValue(big.NewFloat(float64(*resp.BrandID)))
	} else {
		r.BrandID = types.NumberNull()
	}
	r.Cc = nil
	for _, ccItem := range resp.Cc {
		var cc1 types.String
		cc1Result, _ := json.Marshal(ccItem)
		cc1 = types.StringValue(string(cc1Result))
		r.Cc = append(r.Cc, cc1)
	}
	r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
	if resp.CreatedBy != nil {
		r.CreatedBy = types.NumberValue(big.NewFloat(float64(*resp.CreatedBy)))
	} else {
		r.CreatedBy = types.NumberNull()
	}
	if resp.File == nil {
		r.File = types.StringNull()
	} else {
		fileResult, _ := json.Marshal(resp.File)
		r.File = types.StringValue(string(fileResult))
	}
	if resp.From == nil {
		r.From = types.StringNull()
	} else {
		fromResult, _ := json.Marshal(resp.From)
		r.From = types.StringValue(string(fromResult))
	}
	r.ID = types.StringValue(resp.ID)
	r.Name = types.StringValue(resp.Name)
	r.Org = types.StringValue(resp.Org)
	r.Schema = types.StringValue(resp.Schema)
	r.Subject = types.StringPointerValue(resp.Subject)
	r.SystemTemplate = types.BoolPointerValue(resp.SystemTemplate)
	r.Tags = nil
	for _, v := range resp.Tags {
		r.Tags = append(r.Tags, types.StringValue(v))
	}
	r.Title = types.StringValue(resp.Title)
	r.To = nil
	for _, toItem := range resp.To {
		var to1 types.String
		to1Result, _ := json.Marshal(toItem)
		to1 = types.StringValue(string(to1Result))
		r.To = append(r.To, to1)
	}
	r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
	if resp.UpdatedBy != nil {
		r.UpdatedBy = types.NumberValue(big.NewFloat(float64(*resp.UpdatedBy)))
	} else {
		r.UpdatedBy = types.NumberNull()
	}
}
