// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-emailtemplate/internal/sdk"
	"github.com/epilot-dev/terraform-provider-epilot-emailtemplate/internal/sdk/models/operations"
	"github.com/epilot-dev/terraform-provider-epilot-emailtemplate/internal/validators"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &EmailTemplateResource{}
var _ resource.ResourceWithImportState = &EmailTemplateResource{}

func NewEmailTemplateResource() resource.Resource {
	return &EmailTemplateResource{}
}

// EmailTemplateResource defines the resource implementation.
type EmailTemplateResource struct {
	client *sdk.SDK
}

// EmailTemplateResourceModel describes the resource data model.
type EmailTemplateResourceModel struct {
	Attachments    []types.String `tfsdk:"attachments"`
	Bcc            []types.String `tfsdk:"bcc"`
	Body           types.String   `tfsdk:"body"`
	BrandID        types.Number   `tfsdk:"brand_id"`
	Cc             []types.String `tfsdk:"cc"`
	CreatedAt      types.String   `tfsdk:"created_at"`
	CreatedBy      types.String   `tfsdk:"created_by"`
	File           types.String   `tfsdk:"file"`
	From           types.String   `tfsdk:"from"`
	ID             types.String   `tfsdk:"id"`
	Manifest       []types.String `tfsdk:"manifest"`
	Name           types.String   `tfsdk:"name"`
	Org            types.String   `tfsdk:"org"`
	Purpose        []types.String `tfsdk:"purpose"`
	Schema         types.String   `tfsdk:"schema"`
	Subject        types.String   `tfsdk:"subject"`
	SystemTemplate types.Bool     `tfsdk:"system_template"`
	Tags           []types.String `tfsdk:"tags"`
	Title          types.String   `tfsdk:"title"`
	To             []types.String `tfsdk:"to"`
	UpdatedAt      types.String   `tfsdk:"updated_at"`
	UpdatedBy      types.String   `tfsdk:"updated_by"`
}

func (r *EmailTemplateResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_email_template"
}

func (r *EmailTemplateResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "EmailTemplate Resource",
		Attributes: map[string]schema.Attribute{
			"attachments": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				Description: `Email template attachments`,
				Validators: []validator.List{
					listvalidator.ValueStringsAre(validators.IsValidJSON()),
				},
			},
			"bcc": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				Description: `Bcc`,
				Validators: []validator.List{
					listvalidator.ValueStringsAre(validators.IsValidJSON()),
				},
			},
			"body": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Body`,
			},
			"brand_id": schema.NumberAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Brand ID. Equal 0 if available for All brands`,
			},
			"cc": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				Description: `Cc`,
				Validators: []validator.List{
					listvalidator.ValueStringsAre(validators.IsValidJSON()),
				},
			},
			"created_at": schema.StringAttribute{
				Computed:    true,
				Description: `Created date`,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"created_by": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Created by`,
			},
			"file": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Parsed as JSON.`,
				Validators: []validator.String{
					validators.IsValidJSON(),
				},
			},
			"from": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Parsed as JSON.`,
				Validators: []validator.String{
					validators.IsValidJSON(),
				},
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Template entity ID`,
			},
			"manifest": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				Description: `Manifest ID used to create/update the entity`,
			},
			"name": schema.StringAttribute{
				Required:    true,
				Description: `name`,
			},
			"org": schema.StringAttribute{
				Computed:    true,
				Description: `Ivy Organization ID the entity belongs to`,
			},
			"purpose": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				Description: `Entity Purposes`,
			},
			"schema": schema.StringAttribute{
				Computed:    true,
				Description: `URL-friendly identifier for the entity schema`,
			},
			"subject": schema.StringAttribute{
				Required:    true,
				Description: `Subject`,
			},
			"system_template": schema.BoolAttribute{
				Computed: true,
				Optional: true,
				MarkdownDescription: `If template is created by system (Double Opt-in, CMD invitation,...) then true, and some attributes can not be edited such as Name, To,...` + "\n" +
					`Remember to add default content of template to [system-template.ts](https://gitlab.com/e-pilot/product/email-templates/svc-email-templates-api/-/blob/main/lambda/HandlerFunction/src/enum/system-template.ts) enum for revert to original feature`,
			},
			"tags": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				Description: `Entity tags`,
			},
			"title": schema.StringAttribute{
				Computed:    true,
				Description: `Entity title`,
			},
			"to": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				Description: `To`,
				Validators: []validator.List{
					listvalidator.ValueStringsAre(validators.IsValidJSON()),
				},
			},
			"updated_at": schema.StringAttribute{
				Computed:    true,
				Description: `Updated date`,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"updated_by": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Updated by`,
			},
		},
	}
}

func (r *EmailTemplateResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *EmailTemplateResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *EmailTemplateResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := data.ToSharedEmailTemplateRequest()
	res, err := r.client.EmailTemplates.SaveTemplate(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.EmailTemplateEntity != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedEmailTemplateEntity(res.EmailTemplateEntity)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *EmailTemplateResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *EmailTemplateResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var id string
	id = data.ID.ValueString()

	request := operations.GetTemplateDetailRequest{
		ID: id,
	}
	res, err := r.client.EmailTemplates.GetTemplateDetail(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.EmailTemplateResponse != nil && res.EmailTemplateResponse.Entity != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedEmailTemplateEntity(res.EmailTemplateResponse.Entity)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *EmailTemplateResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *EmailTemplateResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	emailTemplateEntity := data.ToSharedEmailTemplateEntity()
	var id string
	id = data.ID.ValueString()

	request := operations.UpdateTemplateDetailRequest{
		EmailTemplateEntity: emailTemplateEntity,
		ID:                  id,
	}
	res, err := r.client.EmailTemplates.UpdateTemplateDetail(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.EmailTemplateResponse != nil && res.EmailTemplateResponse.Entity != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedEmailTemplateEntity(res.EmailTemplateResponse.Entity)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *EmailTemplateResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *EmailTemplateResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; entity does not have a configured DELETE operation
}

func (r *EmailTemplateResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), req.ID)...)
}
