// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-emailtemplate/internal/sdk/internal/utils"
	"github.com/epilot-dev/terraform-provider-epilot-emailtemplate/internal/sdk/models/shared"
	"net/http"
)

// Action - Trigger an APPROVE OR CANCEL action for the bulk message request.
//
// * APPROVE: Alias for APPROVE_WITH_CONSENT
// * APPROVE_WITH_CONSENT: Approve the bulk message request and send emails to queued recipients with consent
// * APPROVE_ALL: Approve the bulk message request and send emails to all queued recipients, including those without consent
// * CANCEL: Cancel the bulk message request
type Action string

const (
	ActionApprove            Action = "APPROVE"
	ActionApproveWithConsent Action = "APPROVE_WITH_CONSENT"
	ActionApproveAll         Action = "APPROVE_ALL"
	ActionCancel             Action = "CANCEL"
)

func (e Action) ToPointer() *Action {
	return &e
}

func (e *Action) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "APPROVE":
		fallthrough
	case "APPROVE_WITH_CONSENT":
		fallthrough
	case "APPROVE_ALL":
		fallthrough
	case "CANCEL":
		*e = Action(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Action: %v", v)
	}
}

type Three struct {
	// Trigger an APPROVE OR CANCEL action for the bulk message request.
	//
	// * APPROVE: Alias for APPROVE_WITH_CONSENT
	// * APPROVE_WITH_CONSENT: Approve the bulk message request and send emails to queued recipients with consent
	// * APPROVE_ALL: Approve the bulk message request and send emails to all queued recipients, including those without consent
	// * CANCEL: Cancel the bulk message request
	//
	Action *Action `json:"action,omitempty"`
	// Job ID for tracking the status of a bulk message request
	JobID string `json:"job_id"`
}

func (o *Three) GetAction() *Action {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *Three) GetJobID() string {
	if o == nil {
		return ""
	}
	return o.JobID
}

type BulkSendMessageRequestBodyType string

const (
	BulkSendMessageRequestBodyTypeBulkSendMessageRequestWithQuery BulkSendMessageRequestBodyType = "BulkSendMessageRequestWithQuery"
	BulkSendMessageRequestBodyTypeBulkSendMessageRequest          BulkSendMessageRequestBodyType = "BulkSendMessageRequest"
	BulkSendMessageRequestBodyTypeThree                           BulkSendMessageRequestBodyType = "3"
)

type BulkSendMessageRequestBody struct {
	BulkSendMessageRequestWithQuery *shared.BulkSendMessageRequestWithQuery
	BulkSendMessageRequest          *shared.BulkSendMessageRequest
	Three                           *Three

	Type BulkSendMessageRequestBodyType
}

func CreateBulkSendMessageRequestBodyBulkSendMessageRequestWithQuery(bulkSendMessageRequestWithQuery shared.BulkSendMessageRequestWithQuery) BulkSendMessageRequestBody {
	typ := BulkSendMessageRequestBodyTypeBulkSendMessageRequestWithQuery

	return BulkSendMessageRequestBody{
		BulkSendMessageRequestWithQuery: &bulkSendMessageRequestWithQuery,
		Type:                            typ,
	}
}

func CreateBulkSendMessageRequestBodyBulkSendMessageRequest(bulkSendMessageRequest shared.BulkSendMessageRequest) BulkSendMessageRequestBody {
	typ := BulkSendMessageRequestBodyTypeBulkSendMessageRequest

	return BulkSendMessageRequestBody{
		BulkSendMessageRequest: &bulkSendMessageRequest,
		Type:                   typ,
	}
}

func CreateBulkSendMessageRequestBodyThree(three Three) BulkSendMessageRequestBody {
	typ := BulkSendMessageRequestBodyTypeThree

	return BulkSendMessageRequestBody{
		Three: &three,
		Type:  typ,
	}
}

func (u *BulkSendMessageRequestBody) UnmarshalJSON(data []byte) error {

	three := Three{}
	if err := utils.UnmarshalJSON(data, &three, "", true, true); err == nil {
		u.Three = &three
		u.Type = BulkSendMessageRequestBodyTypeThree
		return nil
	}

	bulkSendMessageRequestWithQuery := shared.BulkSendMessageRequestWithQuery{}
	if err := utils.UnmarshalJSON(data, &bulkSendMessageRequestWithQuery, "", true, true); err == nil {
		u.BulkSendMessageRequestWithQuery = &bulkSendMessageRequestWithQuery
		u.Type = BulkSendMessageRequestBodyTypeBulkSendMessageRequestWithQuery
		return nil
	}

	bulkSendMessageRequest := shared.BulkSendMessageRequest{}
	if err := utils.UnmarshalJSON(data, &bulkSendMessageRequest, "", true, true); err == nil {
		u.BulkSendMessageRequest = &bulkSendMessageRequest
		u.Type = BulkSendMessageRequestBodyTypeBulkSendMessageRequest
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u BulkSendMessageRequestBody) MarshalJSON() ([]byte, error) {
	if u.BulkSendMessageRequestWithQuery != nil {
		return utils.MarshalJSON(u.BulkSendMessageRequestWithQuery, "", true)
	}

	if u.BulkSendMessageRequest != nil {
		return utils.MarshalJSON(u.BulkSendMessageRequest, "", true)
	}

	if u.Three != nil {
		return utils.MarshalJSON(u.Three, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type BulkSendMessageResponse struct {
	// Success
	BulkSendMessageJob *shared.BulkSendMessageJob
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *BulkSendMessageResponse) GetBulkSendMessageJob() *shared.BulkSendMessageJob {
	if o == nil {
		return nil
	}
	return o.BulkSendMessageJob
}

func (o *BulkSendMessageResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *BulkSendMessageResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *BulkSendMessageResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
