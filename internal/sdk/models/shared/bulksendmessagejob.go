// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-emailtemplate/internal/sdk/internal/utils"
	"time"
)

// ApproveAction - Type of approval action for the bulk message request.
//
// * APPROVE_WITH_CONSENT: Approve the bulk message request and send emails to queued recipients with consent
// * APPROVE_ALL: Approve the bulk message request and send emails to all queued recipients, including those without consent
type ApproveAction string

const (
	ApproveActionApproveWithConsent ApproveAction = "APPROVE_WITH_CONSENT"
	ApproveActionApproveAll         ApproveAction = "APPROVE_ALL"
)

func (e ApproveAction) ToPointer() *ApproveAction {
	return &e
}
func (e *ApproveAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "APPROVE_WITH_CONSENT":
		fallthrough
	case "APPROVE_ALL":
		*e = ApproveAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ApproveAction: %v", v)
	}
}

type Failed struct {
	EmailTo []string `json:"email_to,omitempty"`
	// Recipient Entity ID
	EntityID string `json:"entity_id"`
	// Error message
	Error string `json:"error"`
}

func (o *Failed) GetEmailTo() []string {
	if o == nil {
		return nil
	}
	return o.EmailTo
}

func (o *Failed) GetEntityID() string {
	if o == nil {
		return ""
	}
	return o.EntityID
}

func (o *Failed) GetError() string {
	if o == nil {
		return ""
	}
	return o.Error
}

type Queued struct {
	// Recipient emails
	EmailTo []string `json:"email_to"`
	// Recipient emails with consent
	EmailWithConsent []string `json:"email_with_consent"`
	// Recipient Entity ID
	EntityID string `json:"entity_id"`
}

func (o *Queued) GetEmailTo() []string {
	if o == nil {
		return []string{}
	}
	return o.EmailTo
}

func (o *Queued) GetEmailWithConsent() []string {
	if o == nil {
		return []string{}
	}
	return o.EmailWithConsent
}

func (o *Queued) GetEntityID() string {
	if o == nil {
		return ""
	}
	return o.EntityID
}

type RequestType string

const (
	RequestTypeBulkSendMessageRequest          RequestType = "BulkSendMessageRequest"
	RequestTypeBulkSendMessageRequestWithQuery RequestType = "BulkSendMessageRequestWithQuery"
)

type Request struct {
	BulkSendMessageRequest          *BulkSendMessageRequest
	BulkSendMessageRequestWithQuery *BulkSendMessageRequestWithQuery

	Type RequestType
}

func CreateRequestBulkSendMessageRequest(bulkSendMessageRequest BulkSendMessageRequest) Request {
	typ := RequestTypeBulkSendMessageRequest

	return Request{
		BulkSendMessageRequest: &bulkSendMessageRequest,
		Type:                   typ,
	}
}

func CreateRequestBulkSendMessageRequestWithQuery(bulkSendMessageRequestWithQuery BulkSendMessageRequestWithQuery) Request {
	typ := RequestTypeBulkSendMessageRequestWithQuery

	return Request{
		BulkSendMessageRequestWithQuery: &bulkSendMessageRequestWithQuery,
		Type:                            typ,
	}
}

func (u *Request) UnmarshalJSON(data []byte) error {

	var bulkSendMessageRequest BulkSendMessageRequest = BulkSendMessageRequest{}
	if err := utils.UnmarshalJSON(data, &bulkSendMessageRequest, "", true, true); err == nil {
		u.BulkSendMessageRequest = &bulkSendMessageRequest
		u.Type = RequestTypeBulkSendMessageRequest
		return nil
	}

	var bulkSendMessageRequestWithQuery BulkSendMessageRequestWithQuery = BulkSendMessageRequestWithQuery{}
	if err := utils.UnmarshalJSON(data, &bulkSendMessageRequestWithQuery, "", true, true); err == nil {
		u.BulkSendMessageRequestWithQuery = &bulkSendMessageRequestWithQuery
		u.Type = RequestTypeBulkSendMessageRequestWithQuery
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Request", string(data))
}

func (u Request) MarshalJSON() ([]byte, error) {
	if u.BulkSendMessageRequest != nil {
		return utils.MarshalJSON(u.BulkSendMessageRequest, "", true)
	}

	if u.BulkSendMessageRequestWithQuery != nil {
		return utils.MarshalJSON(u.BulkSendMessageRequestWithQuery, "", true)
	}

	return nil, errors.New("could not marshal union type Request: all fields are null")
}

type Sent struct {
	EmailTo []string `json:"email_to,omitempty"`
	// Recipient Entity ID
	EntityID string `json:"entity_id"`
	// Message ID
	MessageID string `json:"message_id"`
}

func (o *Sent) GetEmailTo() []string {
	if o == nil {
		return nil
	}
	return o.EmailTo
}

func (o *Sent) GetEntityID() string {
	if o == nil {
		return ""
	}
	return o.EntityID
}

func (o *Sent) GetMessageID() string {
	if o == nil {
		return ""
	}
	return o.MessageID
}

// BulkSendMessageJobStatus - Status of the bulk message action
// * PROCESSING: Bulk message action is processing the request
// * QUEUEING: Bulk message action is generating emails to send in a queue
// * SENDING: Bulk message action is sending emails from the queue
// * SUCCESS: Bulk message action is completed successfully
// * FAILED: Bulk message action is failed
// * CANCELLED: Bulk message action was cancelled
type BulkSendMessageJobStatus string

const (
	BulkSendMessageJobStatusProcessing BulkSendMessageJobStatus = "PROCESSING"
	BulkSendMessageJobStatusQueueing   BulkSendMessageJobStatus = "QUEUEING"
	BulkSendMessageJobStatusApproval   BulkSendMessageJobStatus = "APPROVAL"
	BulkSendMessageJobStatusSending    BulkSendMessageJobStatus = "SENDING"
	BulkSendMessageJobStatusSuccess    BulkSendMessageJobStatus = "SUCCESS"
	BulkSendMessageJobStatusFailed     BulkSendMessageJobStatus = "FAILED"
	BulkSendMessageJobStatusCancelled  BulkSendMessageJobStatus = "CANCELLED"
)

func (e BulkSendMessageJobStatus) ToPointer() *BulkSendMessageJobStatus {
	return &e
}
func (e *BulkSendMessageJobStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PROCESSING":
		fallthrough
	case "QUEUEING":
		fallthrough
	case "APPROVAL":
		fallthrough
	case "SENDING":
		fallthrough
	case "SUCCESS":
		fallthrough
	case "FAILED":
		fallthrough
	case "CANCELLED":
		*e = BulkSendMessageJobStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BulkSendMessageJobStatus: %v", v)
	}
}

type BulkSendMessageJob struct {
	// Type of approval action for the bulk message request.
	//
	// * APPROVE_WITH_CONSENT: Approve the bulk message request and send emails to queued recipients with consent
	// * APPROVE_ALL: Approve the bulk message request and send emails to all queued recipients, including those without consent
	//
	ApproveAction *ApproveAction `json:"approve_action,omitempty"`
	// Time when the bulk message action was last updated
	ApprovedAt *time.Time `json:"approved_at,omitempty"`
	// Time when the bulk message action was created
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// User ID who created the bulk message action
	CreatedBy *string `json:"created_by,omitempty"`
	// List of entity ids that were skipped or failed
	Failed []Failed `json:"failed,omitempty"`
	// Job ID for tracking the status of bulk message action
	JobID string `json:"job_id"`
	// Organization ID
	OrgID *string `json:"org_id,omitempty"`
	// List of entity ids that are queued for sending
	Queued  []Queued `json:"queued,omitempty"`
	Request Request  `json:"request"`
	// List of entity ids and message ids that were sent successfully
	Sent []Sent `json:"sent,omitempty"`
	// When true, it lets to send only the email by skip creating the thread & message entities.
	SkipCreatingEntities *bool `json:"skip_creating_entities,omitempty"`
	// Status of the bulk message action
	// * PROCESSING: Bulk message action is processing the request
	// * QUEUEING: Bulk message action is generating emails to send in a queue
	// * SENDING: Bulk message action is sending emails from the queue
	// * SUCCESS: Bulk message action is completed successfully
	// * FAILED: Bulk message action is failed
	// * CANCELLED: Bulk message action was cancelled
	//
	Status BulkSendMessageJobStatus `json:"status"`
	// Task token to approve or cancel the bulk message action
	TaskToken *string `json:"task_token,omitempty"`
	// Total number of emails generated and queued for sending
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	TotalQueued *int64 `json:"total_queued,omitempty"`
	// Time when the bulk message action was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

func (b BulkSendMessageJob) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BulkSendMessageJob) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BulkSendMessageJob) GetApproveAction() *ApproveAction {
	if o == nil {
		return nil
	}
	return o.ApproveAction
}

func (o *BulkSendMessageJob) GetApprovedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ApprovedAt
}

func (o *BulkSendMessageJob) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *BulkSendMessageJob) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *BulkSendMessageJob) GetFailed() []Failed {
	if o == nil {
		return nil
	}
	return o.Failed
}

func (o *BulkSendMessageJob) GetJobID() string {
	if o == nil {
		return ""
	}
	return o.JobID
}

func (o *BulkSendMessageJob) GetOrgID() *string {
	if o == nil {
		return nil
	}
	return o.OrgID
}

func (o *BulkSendMessageJob) GetQueued() []Queued {
	if o == nil {
		return nil
	}
	return o.Queued
}

func (o *BulkSendMessageJob) GetRequest() Request {
	if o == nil {
		return Request{}
	}
	return o.Request
}

func (o *BulkSendMessageJob) GetSent() []Sent {
	if o == nil {
		return nil
	}
	return o.Sent
}

func (o *BulkSendMessageJob) GetSkipCreatingEntities() *bool {
	if o == nil {
		return nil
	}
	return o.SkipCreatingEntities
}

func (o *BulkSendMessageJob) GetStatus() BulkSendMessageJobStatus {
	if o == nil {
		return BulkSendMessageJobStatus("")
	}
	return o.Status
}

func (o *BulkSendMessageJob) GetTaskToken() *string {
	if o == nil {
		return nil
	}
	return o.TaskToken
}

func (o *BulkSendMessageJob) GetTotalQueued() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalQueued
}

func (o *BulkSendMessageJob) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
