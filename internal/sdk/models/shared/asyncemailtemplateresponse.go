// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DocProgressCount - Progress count of the documents that are needed to generate
type DocProgressCount struct {
	// Completed count
	Completed float64 `json:"completed"`
	// Total count
	Total float64 `json:"total"`
}

func (o *DocProgressCount) GetCompleted() float64 {
	if o == nil {
		return 0.0
	}
	return o.Completed
}

func (o *DocProgressCount) GetTotal() float64 {
	if o == nil {
		return 0.0
	}
	return o.Total
}

type Relations struct {
}

// Result of the email template that is replaced along with generated docs
type Result struct {
	Entity    *EmailTemplateEntity `json:"entity,omitempty"`
	Relations []Relations          `json:"relations,omitempty"`
}

func (o *Result) GetEntity() *EmailTemplateEntity {
	if o == nil {
		return nil
	}
	return o.Entity
}

func (o *Result) GetRelations() []Relations {
	if o == nil {
		return nil
	}
	return o.Relations
}

type Status string

const (
	StatusStarted    Status = "STARTED"
	StatusProcessing Status = "PROCESSING"
	StatusSuccess    Status = "SUCCESS"
	StatusFailed     Status = "FAILED"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STARTED":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "SUCCESS":
		fallthrough
	case "FAILED":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type AsyncEmailTemplateResponse struct {
	// Progress count of the documents that are needed to generate
	DocProgressCount *DocProgressCount `json:"doc_progress_count,omitempty"`
	// Job ID of the email template that is requested to replace and generate docs
	JobID string `json:"job_id"`
	// Error message
	Message *string `json:"message,omitempty"`
	// Result of the email template that is replaced along with generated docs
	Result *Result `json:"result,omitempty"`
	Status Status  `json:"status"`
}

func (o *AsyncEmailTemplateResponse) GetDocProgressCount() *DocProgressCount {
	if o == nil {
		return nil
	}
	return o.DocProgressCount
}

func (o *AsyncEmailTemplateResponse) GetJobID() string {
	if o == nil {
		return ""
	}
	return o.JobID
}

func (o *AsyncEmailTemplateResponse) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *AsyncEmailTemplateResponse) GetResult() *Result {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *AsyncEmailTemplateResponse) GetStatus() Status {
	if o == nil {
		return Status("")
	}
	return o.Status
}
