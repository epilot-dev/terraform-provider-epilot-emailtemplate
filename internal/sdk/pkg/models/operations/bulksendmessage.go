// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-emailtemplate/internal/sdk/pkg/models/shared"
	"github.com/epilot-dev/terraform-provider-epilot-emailtemplate/internal/sdk/pkg/utils"
	"net/http"
)

// Action - Provide CANCEL to stop the bulk message request
type Action string

const (
	ActionCancel Action = "CANCEL"
)

func (e Action) ToPointer() *Action {
	return &e
}

func (e *Action) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CANCEL":
		*e = Action(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Action: %v", v)
	}
}

type Three struct {
	// Provide CANCEL to stop the bulk message request
	Action *Action `json:"action,omitempty"`
	// Job ID for tracking the status of a bulk message request
	JobID string `json:"job_id"`
}

func (o *Three) GetAction() *Action {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *Three) GetJobID() string {
	if o == nil {
		return ""
	}
	return o.JobID
}

type One struct {
	// ID of email template to use for sending bulk emails
	EmailTemplateID string `json:"email_template_id"`
	// Entity search query to select recipients
	RecipientQuery string `json:"recipient_query"`
}

func (o *One) GetEmailTemplateID() string {
	if o == nil {
		return ""
	}
	return o.EmailTemplateID
}

func (o *One) GetRecipientQuery() string {
	if o == nil {
		return ""
	}
	return o.RecipientQuery
}

type BulkSendMessageRequestBodyType string

const (
	BulkSendMessageRequestBodyTypeOne                    BulkSendMessageRequestBodyType = "1"
	BulkSendMessageRequestBodyTypeBulkSendMessageRequest BulkSendMessageRequestBodyType = "BulkSendMessageRequest"
	BulkSendMessageRequestBodyTypeThree                  BulkSendMessageRequestBodyType = "3"
)

type BulkSendMessageRequestBody struct {
	One                    *One
	BulkSendMessageRequest *shared.BulkSendMessageRequest
	Three                  *Three

	Type BulkSendMessageRequestBodyType
}

func CreateBulkSendMessageRequestBodyOne(one One) BulkSendMessageRequestBody {
	typ := BulkSendMessageRequestBodyTypeOne

	return BulkSendMessageRequestBody{
		One:  &one,
		Type: typ,
	}
}

func CreateBulkSendMessageRequestBodyBulkSendMessageRequest(bulkSendMessageRequest shared.BulkSendMessageRequest) BulkSendMessageRequestBody {
	typ := BulkSendMessageRequestBodyTypeBulkSendMessageRequest

	return BulkSendMessageRequestBody{
		BulkSendMessageRequest: &bulkSendMessageRequest,
		Type:                   typ,
	}
}

func CreateBulkSendMessageRequestBodyThree(three Three) BulkSendMessageRequestBody {
	typ := BulkSendMessageRequestBodyTypeThree

	return BulkSendMessageRequestBody{
		Three: &three,
		Type:  typ,
	}
}

func (u *BulkSendMessageRequestBody) UnmarshalJSON(data []byte) error {

	one := new(One)
	if err := utils.UnmarshalJSON(data, &one, "", true, true); err == nil {
		u.One = one
		u.Type = BulkSendMessageRequestBodyTypeOne
		return nil
	}

	bulkSendMessageRequest := new(shared.BulkSendMessageRequest)
	if err := utils.UnmarshalJSON(data, &bulkSendMessageRequest, "", true, true); err == nil {
		u.BulkSendMessageRequest = bulkSendMessageRequest
		u.Type = BulkSendMessageRequestBodyTypeBulkSendMessageRequest
		return nil
	}

	three := new(Three)
	if err := utils.UnmarshalJSON(data, &three, "", true, true); err == nil {
		u.Three = three
		u.Type = BulkSendMessageRequestBodyTypeThree
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u BulkSendMessageRequestBody) MarshalJSON() ([]byte, error) {
	if u.One != nil {
		return utils.MarshalJSON(u.One, "", true)
	}

	if u.BulkSendMessageRequest != nil {
		return utils.MarshalJSON(u.BulkSendMessageRequest, "", true)
	}

	if u.Three != nil {
		return utils.MarshalJSON(u.Three, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type BulkSendMessageResponse struct {
	// Success
	BulkSendMessageJob *shared.BulkSendMessageJob
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *BulkSendMessageResponse) GetBulkSendMessageJob() *shared.BulkSendMessageJob {
	if o == nil {
		return nil
	}
	return o.BulkSendMessageJob
}

func (o *BulkSendMessageResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *BulkSendMessageResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *BulkSendMessageResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
