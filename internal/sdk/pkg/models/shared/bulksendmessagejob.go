// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Failed struct {
	// Recipient Entity ID
	EntityID string `json:"entity_id"`
	// Error message
	Error string `json:"error"`
}

func (o *Failed) GetEntityID() string {
	if o == nil {
		return ""
	}
	return o.EntityID
}

func (o *Failed) GetError() string {
	if o == nil {
		return ""
	}
	return o.Error
}

type Sent struct {
	// Recipient Entity ID
	EntityID string `json:"entity_id"`
	// Message ID
	MessageID string `json:"message_id"`
}

func (o *Sent) GetEntityID() string {
	if o == nil {
		return ""
	}
	return o.EntityID
}

func (o *Sent) GetMessageID() string {
	if o == nil {
		return ""
	}
	return o.MessageID
}

// BulkSendMessageJobStatus - Status of the bulk message action
// * QUEUEING: Bulk message action is generating emails to send in a queue
// * SENDING: Bulk message action is sending emails from the queue
// * SUCCESS: Bulk message action is completed successfully
// * FAILED: Bulk message action is failed
// * CANCELLED: Bulk message action was cancelled
type BulkSendMessageJobStatus string

const (
	BulkSendMessageJobStatusQueueing  BulkSendMessageJobStatus = "QUEUEING"
	BulkSendMessageJobStatusSending   BulkSendMessageJobStatus = "SENDING"
	BulkSendMessageJobStatusSuccess   BulkSendMessageJobStatus = "SUCCESS"
	BulkSendMessageJobStatusFailed    BulkSendMessageJobStatus = "FAILED"
	BulkSendMessageJobStatusCancelled BulkSendMessageJobStatus = "CANCELLED"
)

func (e BulkSendMessageJobStatus) ToPointer() *BulkSendMessageJobStatus {
	return &e
}

func (e *BulkSendMessageJobStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "QUEUEING":
		fallthrough
	case "SENDING":
		fallthrough
	case "SUCCESS":
		fallthrough
	case "FAILED":
		fallthrough
	case "CANCELLED":
		*e = BulkSendMessageJobStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BulkSendMessageJobStatus: %v", v)
	}
}

type BulkSendMessageJob struct {
	// List of entity ids that were skipped or failed
	Failed []Failed `json:"failed,omitempty"`
	// Job ID for tracking the status of bulk message action
	JobID   string                 `json:"job_id"`
	Request BulkSendMessageRequest `json:"request"`
	// List of entity ids and message ids that were sent successfully
	Sent []Sent `json:"sent,omitempty"`
	// Status of the bulk message action
	// * QUEUEING: Bulk message action is generating emails to send in a queue
	// * SENDING: Bulk message action is sending emails from the queue
	// * SUCCESS: Bulk message action is completed successfully
	// * FAILED: Bulk message action is failed
	// * CANCELLED: Bulk message action was cancelled
	//
	Status BulkSendMessageJobStatus `json:"status"`
	// Total number of emails generated and queued for sending
	TotalQueued *int64 `json:"total_queued,omitempty"`
}

func (o *BulkSendMessageJob) GetFailed() []Failed {
	if o == nil {
		return nil
	}
	return o.Failed
}

func (o *BulkSendMessageJob) GetJobID() string {
	if o == nil {
		return ""
	}
	return o.JobID
}

func (o *BulkSendMessageJob) GetRequest() BulkSendMessageRequest {
	if o == nil {
		return BulkSendMessageRequest{}
	}
	return o.Request
}

func (o *BulkSendMessageJob) GetSent() []Sent {
	if o == nil {
		return nil
	}
	return o.Sent
}

func (o *BulkSendMessageJob) GetStatus() BulkSendMessageJobStatus {
	if o == nil {
		return BulkSendMessageJobStatus("")
	}
	return o.Status
}

func (o *BulkSendMessageJob) GetTotalQueued() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalQueued
}
